// 4장 변수

// 4.1 변수란 무엇인가? 왜 필요한가?
/* 
메모리 === 데이터를 저장할 수 있는 메모리 셀의 집합체
메모리 셀 1개 === 1바이트(8비트)

각 셀은 고유의 메모리 주소를 가짐 => 메모리 공간의 위치를 나타냄

변수(variable)
: 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다 (즉, 값의 위치를 가리키는 상징적인 이름이다)
*/
// 변수에 여러 개의 값을 저장하는 방법
/* 
변수는 하나의 값을 저장하기 위한 메커니즘이다
여러 개의 값을 저장하려면 여러 개의 변수를 사용하여야 한다
단, 배열이나 객체 같은 자료구조를 사용하면 관련 있는 여러 개의 값을 그룹화해서 하나의 값처럼 사용할 수 있다
*/
// 변수는 하나의 값을 저장하기 위한 수단이다
var userId = 1;
var userName = 'Lee';

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다
var user = { id: 1, name: 'Lee' };

var users = [
  { id: 1, name: 'Lee' },
  { id: 2, name: 'Kim' },
];

/* 
메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름을 "변수 이름(또는 변수명)"이라 한다
변수에 저장된 값 === 변수 값
변수에 값을 저장하는 것 === 할당
변수에 저장된 값을 읽어 들이는 것 === 참조
*/

// 4.2 식별자 (identifier)
/* 
변수 이름 === 식별자(identifier)

식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름
식별자에는 어떤 값이 저장되어 잇는 메모리 주소를 기억(저장) 한다
따라서 식별자는 값이 아니라 메모리 주소를 기억하고 있다
*/

// 4.3 변수 선언 (variable declaration)
/* 
변수를 사용하려면 반드시 선언이 필요하다
변수를 선언할 때는 var, let, const 키워드를 사용한다
*/

/* 
ES5 vs ES6

var 키워드는 여러 단점이 있다. var 키워드의 여러 단점 중에서 가장 대표적인 것이 블록 레벨 스코프(block-level scope)를 지원하지 않고 함수 레벨 스코프(function level scope)를 지원한다는 점이다
이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다
*/
// 예제 04-04
var score; // 변수 선언 (변수 선언문)

/* 
Note: 키워드 (keyword)
키워드는 자바스크립트 코드를 해석하고 실행하는 자바스크립트 엔진이 수행할 동작을 규정한 일종의 명령이다
자바스크립트 엔진은 키워드를 만나면 자신이 수행해야할 약속된 동작을 수행한다
*/

/* 
위 예제 04-04를 보면 변수를 선언한 후, 아직 변수에 값을 할당하지 않았다. 따라서 변수 선언에 의해 확보된 메모리 공간은 비어 있을 것으로 생각할 수 있다

하지만!!!

이미 확보된 메모리 공간에는 "undefined"라는 값이 암묵적으로 할당되어 초기화된다

Note - undefined
undefined는 자바스크립트에서 제공하는 원시 타입의 값이다
*/

/* 
자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행한다

1. 선언 단계: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다

2. 초기화 단계: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다
*/

/* 
변수를 사용하려면 반드시 선언이 필요하다

변수뿐만 아니라 모든 식별자(함수, 클래스 등)가 그러하다

만약 선언하지 않은 식별자에 접근하면 ReferenceError(참조 에러)가 발생한다
해당 에러는 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러이다
*/

// 4.4 변수 선언의 실행 시점과 변수 호이스팅
// 예제 04-05
console.log(score); // undefined

var score; // 변수 선언문
/* 
변수 선언문 보다 변수를 참조하는 코드가 앞에 있는 경우 아직 score에 대한 변수 선언이 안되었기 때문에 참조 에러(ReferenceError)가 나타날 것으로 예상된다

하지만!!! 

참조 에러는 발생하지 않고 undefined가 출력된다

why??

변수 선언이 소스 코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되었기 때문이다

자바스크립트 엔진은 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 "소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비"를 한다

이 때 소스 코드 실행을 위핸 준비 단계인 "소스코드의 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문 등)을 소스코드에서 찾아내 먼저 실행"한다
그리고 소스코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 선언문을 제외하고 소스코드를 한 줄씩 순차적으로 실행한다

즉, 자바스크립트 엔진은 변수 선언이 소스코드의 어디에 있ㄴ든 상관없이 다른 코드보다 먼저 실행한다. 따라서 변수 선언이 소스코드의 어디에 위치하는지와 상관없이 어디서든지 변수를 참조할 수 있다

변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 "변수 호이스팅 (variable hoisting)"이라 한다

var, let, const, function, function*, class 키워드를 사용해서 선언하는 모든 식별자 (변수, 함수, 클래스)는 호이스팅 된다

모든 선언문은 런타임 이전 단계에서 먼저 실행되기 때문이다
*/

// 4.5 값의 할당 (assignment)
// 예제 04-06
var score; // 변수 선언
score = 80; // 값의 할당

// 예제 04-07
var score = 80; // 변수 선언과 값의 할당
/* 
변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행

값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행됨
*/

// 예제 04-08
console.log(score); // undefined

var score; // 변수 선언
score = 80; // 값의 할당

console.log(score); // 80

// 예제 04-09
console.log(score); // undefined

var score = 80;

console.log(score); // 80
/* 
변수의 선언과 값의 할당을 하나의 문장으로 단축 표현하여도 자바스크립트 엔진은 변수의 선언과 값의 할당을 2개의 문으로 나누어 각각 실행한다
*/

/* 
중요!!!

변수에 값을 할당할 때는 이전 값 undefined가 저장되었던 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아닌 (이러면 변수가 가리키는 메모리 주소는 동일하다)

새로운 메모리 공간을 확보하고 그 곳에 할당 값 80을 저장한 뒤, 그 메모리 주소를 변수에 저장한다
*/

// 예제 04-10
console.log(score); // 2. undefined

score = 80; // 3. 값의 할당
var score; // 1. 변수 선언 -> 런타임 이전에 소스코드 평가 과정에서 먼저 실행 => undefined가 저장된 메모리 주소를 가리키고 있음

console.log(score); // 4. 80

// 4.6 값의 재할당
/* 
재할당이란 이미 값이 할당되어 있는 변수에 새로운 값을 또 다시 할당하는 것을 말한다
*/

// 예제 04-11
var score = 80; // 변수 선언과 값의 할당
score = 90; // 값의 재할당

/* 
Note - 상수 (constant, const)
값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(const)라 한다
*/

/* 
변수에 값을 재할당하면 score 변수의 값은 이전 값 80에서 재할당한 값 90으로 변경된다

처음 값을 할당했을 때와 마찬가지로 이전 값 80이 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 재할당 값 90을 새롭게 저장하는 것이 아니라

새로운 메모리 공간을 확보하고 그 메모리 공간에 숫자 값 90을 저장한다
*/

/* 
예제 04-11에서 score 변수에 90을 재할당(90이 저장된 새로운 메모리 주소를 score에 저장함)하였으므로 현재 score 변수의 값은 90이다

score 이전의 값인 undefined, 80은 어떤 변수도 값으로 가지고 있지 않다

즉, 어떤 식별자와도 연결되어 있지 않다

이것은 undefined와 80이 더이상 필요하지 않다는 것을 의미 === 가비지 콜렉터에 의해 메모리에서 자동 해제됨 (단, 메모리에서 언제 해제될 지는 예측할 수 없다)
*/

/* Note - 가비지 콜렉터 (garbage collector) 

가비지 콜렉터는 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해제(release)하는 기능을 말한다

더이상 사용하지 않는 메모리란 간단히 말하자면 어떤 식별자도 참조하고 있지 않은 메모리 공간을 의미한다

자바스크립트는 가비지 콜렉터를 내장하고 있는 managed 언어로서 가비지 콜렉터를 통해 누수(memory leak)를 방지한다
*/

// 4.7 식별자 네이밍 규칙
/* 
식별자는 다음과 같은 네이밍 규칙을 준수하여야 한다

1. 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다

2. 단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작하는 것은 허용하지 않는다

3. 예약어는 식별자로 사용할 수 없다

*/

/* 
예약어 - reserved word

예약어는 프로그래밍 언어에서 사용되고 있거나 사용될 예정인 단어를 말한다

자바스크립트에서의 예약어는 다음과 같다

await

break

case

catch

class

const

continue

debugger

default

delete

do

else

enum

export

extends

false

finally

for

function

if

implements*

import

in

instanceof

interface*

let*

new

null

package*

private*

protected*

public*

return

super

static*

switch

this

throw

true

try

typeof

var

void

while

with

yield*

(* 식별자로 사용 가능하나 strict mode에서는 사용 불가)
*/

/* 
네이밍 컨벤션 (naming convention)

하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성이 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙이다

아래 4가지 유형의 네이밍 컨벤션이 자주 사용된다
*/

// 예제 04-18
// 카멜 케이스 (camelCase)
var firstName;

// 스네이크 케이스 (snake_case)
var first_name;

// 파스칼 케이스 (PascalCase)
var FirstName;

// 헝가리언 케이스 (typeHungarianCase)
var strFirstName; // type + identifier
var $element = document.getElementById('myId'); // DOM 노드
var observable$ = fromEvent(document, 'click'); // RxJS 옵저버블

/* 
일관성을 유지한다면 어떤 네이밍 컨벤션을 사용해도 좋지만... 

일반적으로

변수나 함수 => 카멜 케이스

생성자 함수, 클래스 이름 => 파스칼 케이스

*/
