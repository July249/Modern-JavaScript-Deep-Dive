// 6.3 템플릿 리터럴

/* 
ES6부터 새롭게 도입된 문자열 표기법

템플릿 리터럴은 멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등 편리한 문자열 처리 기능을 제공

템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다
*/

// 예제 06-08
var template = `Templete literal`;
console.log(template); // Templete literal

// [멀티라인 문자열]
/* 
일반 문자열 내에서는 줄바꿈 (개행)이 허용되지 않는다
*/

// 예제 06-09
var str = `Hello
world.`;
// SyntaxError: Invalid or unexpected token

/* 
따라서 일반 문자열 내에서 줄바꿈 등의 공백을 표현하려면 백슬래시(\)로 시작하는 이스케이프 시퀀스를 사용해야 한다
*/

/* 
이스케이프 시퀀스

\0 : Null
\b : 백스페이스
\f : 폼 피드 - 프린터로 출력할 경우 다음 페이지의 시작 지점으로 이동한다
\n : 개행 - 다음 행으로 이동
\r : 개행 - 커서를 처음으로 이동
\t : 탭 - 수평
\v : 탭 - 수직
\uXXXX : 유니코드
\' : 작은 따옴표
\" : 큰 따옴표
\\ : 백슬래시
*/

// 예제 06-10
var template = `<ul>\n\t<li><a href="#">Home</a></li>\n</ul>`;

console.log(template);

// 출력 결과
/*
<ul>
  <li><a href="#">Home</a></li>
</ul>
*/

// [표현식 삽입]
/* 
문자열은 문자열 연산자 '+'를 이용하여 연결할 수 있다

+ 연산자는 피연산자 중 하나 이상의 문자열인 경우 문자열 연결 연산자로 동작한다

그 외의 경우는 산술연산자(덧셈)으로 동작한다
*/

// 예제 06-12
var first = 'Ung-mo';
var last = 'Lee';

// ES5: 문자열 연결
console.log('My name is ' + first + ' ' + last + '.'); // My name is Ung-mo Lee.

/* 
위의 문자열 연산자 +를 이용하는 방식은 불편함이 많다

이를 해결하기 위한 방법으로 템플릿 리터럴을 이용한다
*/

// 예제 06-13
// ES6: 표현식 삽입
console.log(`My name is ${first} ${last}.`); // My name is Ung-mo Lee.

/* 
표현식을 삽입하려면 ${}으로 표힌식을 감싼다

이때 표현식의 평가 결과가 문자열이 아니더라도 문자열로 타입이 강제로 변환되어 삽입된다
 */

// 예제 06-14
console.log(`1 + 2 = ${1 + 2}`); // 1 + 2 = 3

/* 
표현식 삽입은 반드시 템플릿 리터럴 내에서 사용해야 한다

템플릿 리터럴이 아닌 일반 문자열에서의 표현식 삽입은 문자열로 취급된다
*/

// 예제 06-15
console.log('1 + 2 = ${1 + 2}');
